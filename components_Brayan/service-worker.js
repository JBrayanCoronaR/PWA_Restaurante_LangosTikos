/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

clientsClaim();

const CACHE_NAME = 'MI_APP_v1';

const urlsToCache = [
  '/',
  '/components/Home/Home.jsx',
  '/components/Home/Home.css',
  '/components/Home/Platillo.png',
  '/components/Conocenos/Conocenos.jsx',
  '/components/Conocenos/Conocenos.css',
  '/components/Menu/Menu.jsx',
  '/components/Menu/Menu.css',
  '/components/NavBar/NavBar.jsx',
  '/components/NavBar/NavBar.css',
  '/components/NavBar/Logo_LangosTikos.png',
  '/components/NavBar/LangosTikos_Ne.png',
  '/components/Ubicacion/Ubicacion.jsx',
  '/components/Ubicacion/Ubicacion.css',
  '/components/Registro/Registro.jsx',
  '/components/Registro/Registro.css',
  '/components/SplashScreen/SplashScree.jsx',
  '/components/SplashScreen/SplashScree.css',
  '/components/SplashScreen/LangosTikos_Ne.png',
  'manifest.json' 
];

//Estapa 1: Instalación
self.addEventListener('install', (event) => {
  console.log('Service Worker: Instalado');

  event.waitUntil(
    caches.open('CACHE_NAME').then((cache)=>{
      console.log('Cache abierta');
      return cache.addAll(urlsToCache);
    })
    .then(() => self.skipWaiting())
  );
});

//Etapa 2: Activacion y limpieza de cache 
self.addEventListener('activate', (event) => {
  console.log('SW: Activado');

  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cache) => {
          if (cache !== CACHE_NAME) {
            console.log('SW: Limpiando cache antiguo');
            return caches.delete(cache);
          }
        })
      );
    })
  );
  self.clients.claim();
});


//Etapa 3 Manejo de sincronización en segundo plano
self.addEventListener('sync', (event) => {
  if (event.tag === 'sync-data') {
    console.log('Service Worker: Sincronizando datos');
    event.waitUntil(
      // Aquí podrías agregar el código para sincronizar datos
      fetch('/sync-endpoint', { method: 'POST' })
        .then((response) => {
          if (!response.ok) {
            throw new Error('Sincronización fallida');
          }
          return response.json();
        })
        .then((data) => {
          console.log('Service Worker: Sincronización completada con éxito', data);
        })
        .catch((error) => {
          console.error('Service Worker: Error en sincronización', error);
        })
    );
  }
});

self.addEventListener('fetch',(event)=> {
  console.log('SW: Fetching', event.request.url);

  event.respondWith(
    caches.match(event.request).then(response =>{  //match encontrar
      return response || fetch(event.request)
    }) 
    .catch(() => caches.match('/offline.html')) //muestra un fallback en caso de fallo 
  );
});

//Etapa 4: Push manejo de notificaciones entrantes
self.addEventListener('push', (event) => {
  console.log('SW: Notificación push recibida');

  const title = 'Nueva notificación';
  const options = {
    body: event.data ? event.data.text() : '¡Tienes una nueva notificación!',
    icon: '/icons/icon-192x192.png',
    badge: '/icons/icon-192x192.png',
    actions: [
      { action: 'view', title: 'Ver' },
      { action: 'dismiss', title: 'Descartar' }
    ]
  };

  event.waitUntil(
    self.registration.showNotification(title, options)
  );
});

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.
